@page "/Proveedor/Edit/{idProveedor:int}"
@rendermode InteractiveServer
@inject ProveedoresService proveedorService
@inject NavigationManager navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Editar proveedor</PageTitle>

<EditForm Model="Proveedor" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-warning rounded">
                    <h1>Editar proveedor</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* Id *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="ProveedorId">Id</label>
                    <InputNumber id="ProveedorId" class="form-control text-left"
                                 readonly @bind-Value="Proveedor.ProveedorId"></InputNumber>
                </div>

                @* Nombres *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="Nombres">Nombre del proveedor</label>
                    <InputText id="Nombres" class="form-control"
                               @bind-Value="Proveedor.Nombres" placeholder="Ej: Tecnologías ABC">
                    </InputText>
                    <ValidationMessage For="@(() => Proveedor.Nombres)"></ValidationMessage>
                </div>

                @* RNC *@
                <div class="mb-3 col-3">
                    <label class="form-label" for="RNC">RNC</label>
                    <InputText id="RNC" class="form-control"
                               @bind-Value="Proveedor.RNC" placeholder="Ej: 123456789">
                    </InputText>
                    <ValidationMessage For="@(() => Proveedor.RNC)"></ValidationMessage>
                </div>

                @* Correo *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="Correo">Correo electrónico</label>
                    <InputText id="Correo" type="email" class="form-control"
                               @bind-Value="Proveedor.Correo" placeholder="Ej: contacto@proveedor.com">
                    </InputText>
                    <ValidationMessage For="@(() => Proveedor.Correo)"></ValidationMessage>
                </div>

                @* Teléfono *@
                <div class="mb-3 col-3">
                    <label class="form-label" for="Telefono">Teléfono</label>
                    <InputText id="Telefono" class="form-control"
                               @bind-Value="Proveedor.Telefono" placeholder="Ej: +18091234567">
                    </InputText>
                    <ValidationMessage For="@(() => Proveedor.Telefono)"></ValidationMessage>
                </div>

                @* Fecha de Registro *@
                <div class="mb-3 col-3">
                    <label class="form-label" for="FechaRegistro">Fecha de Registro</label>
                    <input id="FechaRegistro" class="form-control" type="text"
                           value="@Proveedor.FechaRegistro.ToString("dd/MM/yyyy")" readonly />
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center gap-3">
                <button type="submit" class="btn btn-warning">
                    <i class="bi bi-pencil-square"></i> Guardar cambios
                </button>

                <button class="btn btn-secondary" type="button" @onclick="Volver">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Proveedores? Proveedor { get; set; } = new Proveedores();
    List<ToastMessage> Mensajes = new List<ToastMessage>();
    [Parameter]
    public int idProveedor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Proveedor = await proveedorService.Buscar(idProveedor);

        if (Proveedor == null)
        {
            navigation.NavigateTo("/Proveedor/Index");
        }
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var editado = await proveedorService.Guardar(Proveedor);
            if (editado)
            {
                MostrarMensaje(ToastType.Success,
                    $"Proveedor {Proveedor.Nombres} ha sido editado correctamente.");
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "El proveedor no se ha podido editar correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe un proveedor con este RNC o correo electrónico.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await proveedorService.Existe(Proveedor.ProveedorId, Proveedor.Nombres, Proveedor.RNC);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Proveedor/Index");
}