@page "/carrito"
@using CyH_Techno_Store.Models
@using CyH_Techno_Store.Services
@inject CarritoService CarritoService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FacturasService FacturasService
@inject DetalleFacturasService DetalleFacturasService
@inject ProductosService ProductosService

<div class="cart-container">
    <h3>Tu Carrito de Compras</h3>

    @if (CarritoService.TieneItems)
    {
        <div class="cart-items">
            @foreach (var item in CarritoService.Items)
            {
                <div class="cart-item" key="@item.ProductoId">
                    <img src="@item.ImagenUrl" alt="@item.Nombre" width="80" />
                    <div class="item-details">
                        <h5>@item.Nombre</h5>
                        <p>Precio: @item.Precio.ToString("C")</p>
                        <p>Disponibles: @item.StockDisponible</p>
                        <div class="quantity-controls">
                            <button @onclick="() => DisminuirCantidad(item.ProductoId)"
                                    disabled="@(item.Cantidad <= 1)">
                                -
                            </button>
                            <span>@item.Cantidad</span>
                            <button @onclick="() => AumentarCantidad(item.ProductoId)"
                                    disabled="@(item.Cantidad >= item.StockDisponible)">
                                +
                            </button>
                            <button @onclick="() => EliminarItem(item.ProductoId)"
                                    class="btn-remove">
                                Eliminar
                            </button>
                        </div>
                        <p>Subtotal: @((item.Precio * item.Cantidad).ToString("C"))</p>
                    </div>
                </div>
            }
        </div>

        <div class="cart-summary">
            <h4>Total: @CarritoService.Total.ToString("C")</h4>
            <button @onclick="ProcesarCompra"
                    disabled="@procesando"
                    class="btn-checkout">
                @(procesando ? "Procesando..." : "Proceder al Pago")
            </button>
            @if (errorMessage != null)
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        </div>
    }
    else
    {
        <p>Tu carrito está vacío</p>
        <button @onclick="IrAProductos" class="btn-continue">Continuar Comprando</button>
    }
</div>

@code {
    private bool procesando = false;
    private string? errorMessage = null;

    private void IrAProductos()
    {
        Navigation.NavigateTo("/productos");
    }

    private void AumentarCantidad(int productoId)
    {
        var item = CarritoService.Items.First(i => i.ProductoId == productoId);
        CarritoService.AumentarCantidad(productoId, 1, item.StockDisponible);
    }

    private void DisminuirCantidad(int productoId)
    {
        CarritoService.DisminuirCantidad(productoId);
    }

    private void EliminarItem(int productoId)
    {
        CarritoService.EliminarProducto(productoId);
    }

    private async Task ProcesarCompra()
    {
        procesando = true;
        errorMessage = null;

        try
        {
            // Validar stock actualizado desde la base de datos
            if (!await CarritoService.VerificarDisponibilidad(ProductosService))
            {
                errorMessage = "Algunos productos ya no tienen suficiente stock disponible";
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var usuarioId = int.Parse(authState.User.FindFirst("sub")?.Value ?? "0");

            // Crear factura
            var factura = new Facturas
                {
                    FechaRegistro = DateTime.Now,
                    UsuarioId = usuarioId
                };

            var facturaGuardada = await FacturasService.Guardar(factura);
            if (!facturaGuardada)
            {
                errorMessage = "Error al crear la factura";
                return;
            }

            var facturaCreada = await FacturasService.Buscar(factura.FacturaId);
            if (facturaCreada == null)
            {
                errorMessage = "Error al recuperar la factura creada";
                return;
            }

            foreach (var item in CarritoService.Items)
            {
                var detalle = new DetalleFacturas
                    {
                        FacturaId = facturaCreada.FacturaId,
                        ProductoId = item.ProductoId,
                        Cantidad = item.Cantidad,
                        PrecioUnitario = item.Precio
                    };

                var detalleGuardado = await DetalleFacturasService.Guardar(detalle);
                if (!detalleGuardado)
                {
                    errorMessage = $"Error al guardar el producto {item.Nombre}";
                    await FacturasService.Eliminar(facturaCreada.FacturaId);
                    return;
                }
            }

            CarritoService.LimpiarCarrito();
            Navigation.NavigateTo($"/confirmacion/{facturaCreada.FacturaId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            procesando = false;
        }
    }
}