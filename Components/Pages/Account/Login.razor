@page "/login"

@using CyH_Techno_Store.Models
@using CyH_Techno_Store.DAL
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject Contexto contexto 
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-colum">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username"/>
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password "/>
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var UserAccounts = contexto
                .Usuarios
                .Where(u => u.UserName == Model.UserName)
                .FirstOrDefault();

        if (UserAccounts is null || UserAccounts.Password != Model.Password)
        {
            errorMessage = "Usuario inválido o contraseña.";
            return;
        }
        else
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.UserName),
                new Claim(ClaimTypes.NameIdentifier, UserAccounts.UsuarioId.ToString()),
                new Claim(ClaimTypes.Role, UserAccounts.Role)
            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);
            navigationManager.NavigateTo("/");
        }
    }
}