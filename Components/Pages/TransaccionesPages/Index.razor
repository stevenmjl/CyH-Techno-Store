@page "/Transaccion/Index"
@rendermode InteractiveServer
@inject TransaccionesService transaccionesService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Transacciones</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        @* Título y balance *@
        <div class="card-header text-white text-center">
            <div class="bg-primary rounded p-2">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1>Registro de Transacciones</h1>
                    </div>
                    <div class="col-md-4 text-end">
                        <h4>
                            Balance: <span class="badge @(balance >= 0 ? "bg-success" : "bg-danger")">
                                @balance.ToString("C2")
                            </span>
                        </h4>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-body">
            <div class="row mb-2 align-items-end">
                @* Filtros *@
                <div class="row align-items-center">
                    <div class="col-4 col-md-2">
                        <label for="Filtro" class="form-label">Filtrar por:</label>
                    </div>
                    <div class="col-4 col-md-2">
                        <label for="Busqueda" class="form-label">Búsqueda:</label>
                    </div>
                    <div class="col-4 col-md-8 text-end">
                        <label for="TotalTransacciones" class="form-label">
                            Total de transacciones: @ListaTransacciones.Count()
                        </label>
                    </div>
                </div>

                @* Selección de filtro *@
                <div class="col-md-2">
                    <select @bind="filtro" class="form-select">
                        <option value="id">ID</option>
                        <option value="factura">Factura ID</option>
                        <option value="tipo" selected>Tipo</option>
                        <option value="fecha">Fecha</option>
                        <option value="monto">Monto</option>
                    </select>
                </div>

                @* Filtro de búsqueda *@
                <div class="col-md-8">
                    <div class="input-group">
                        <input @bind="valorFiltro" class="form-control"
                               placeholder="Escribir dato" @oninput="HandleInput" />
                        <button @onclick="Buscar" class="btn btn-primary" type="button">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                        <button class="btn btn-secondary bi bi-arrow-counterclockwise"
                                type="button" @onclick="Limpiar">
                            Limpiar
                        </button>
                    </div>
                </div>

                @* Botón crear *@
                <div class="col-md-2 text-end">
                    <a href="/Transaccion/Create" class="btn btn-success bi bi-plus-circle">
                        Registrar
                    </a>
                </div>
            </div>

            @* Tabla con transacciones *@
            <table class="table table-bordered table-hover">
                <thead class="bg-info text-center text-white">
                    <tr>
                        <th>ID</th>
                        <th>Tipo</th>
                        <th>Monto</th>
                        <th>Factura ID</th>
                        <th>Fecha Registro</th>
                        <th>Detalle Factura</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaccion in ListaTransacciones)
                    {
                        <tr class="@(transaccion.Tipo == "Ingreso" ? "table-success" : "table-danger")">
                            <td class="text-center">@transaccion.TransaccionId</td>
                            <td class="text-center">
                                <span class="badge @(transaccion.Tipo == "Ingreso" ? "bg-success" : "bg-danger")">
                                    @transaccion.Tipo
                                </span>
                            </td>
                            <td class="text-end">@transaccion.Monto.ToString("C2")</td>
                            <td class="text-center">@transaccion.FacturaId</td>
                            <td class="text-center">@transaccion.FechaRegistro.ToString("dd/MM/yyyy HH:mm")</td>
                            <td class="text-center">
                                @if (transaccion.Tipo == "Ingreso")
                                {
                                    <span>Factura Cliente</span>
                                }
                                else if (transaccion.Tipo == "Gasto")
                                {
                                    <span>Factura Proveedor</span>
                                }
                                else
                                {
                                    <span class="text-muted">Sin detalle</span>
                                }
                            </td>
                            <td class="text-center">
                                <button class="btn btn-danger bi bi-trash"
                                        @onclick="() => EliminarTransaccion(transaccion.TransaccionId)">
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public List<Transacciones> ListaTransacciones = new List<Transacciones>();
    private string filtro = "tipo";
    private string valorFiltro = "";
    private decimal balance = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarTransacciones();
        balance = await transaccionesService.ObtenerBalance();
    }

    private async Task CargarTransacciones()
    {
        ListaTransacciones = await transaccionesService.ListarTransacciones(null);
        balance = await transaccionesService.ObtenerBalance();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        valorFiltro = e.Value?.ToString() ?? "";
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(valorFiltro))
        {
            await CargarTransacciones();
            return;
        }

        switch (filtro)
        {
            case "id" when int.TryParse(valorFiltro, out int transaccionId):
                ListaTransacciones = await transaccionesService.ListarTransacciones(
                    t => t.TransaccionId == transaccionId);
                break;

            case "factura" when int.TryParse(valorFiltro, out int facturaId):
                ListaTransacciones = await transaccionesService.ListarTransacciones(
                    t => t.FacturaId == facturaId);
                break;

            case "tipo":
                ListaTransacciones = await transaccionesService.ListarTransacciones(
                    t => t.Tipo!.ToLower().Contains(valorFiltro.ToLower()));
                break;

            case "fecha" when DateTime.TryParse(valorFiltro, out DateTime fecha):
                ListaTransacciones = await transaccionesService.ListarTransacciones(
                    t => t.FechaRegistro.Date == fecha.Date);
                break;

            case "monto" when decimal.TryParse(valorFiltro, out decimal monto):
                ListaTransacciones = await transaccionesService.ListarTransacciones(
                    t => t.Monto == monto);
                break;

            default:
                await CargarTransacciones();
                break;
        }
    }

    private async Task Limpiar()
    {
        valorFiltro = "";
        filtro = "tipo";
        await CargarTransacciones();
    }

    private async Task EliminarTransaccion(int transaccionId)
    {
        var transaccion = ListaTransacciones.FirstOrDefault(t => t.TransaccionId == transaccionId);

        if (transaccion != null && await transaccionesService.EliminarTransaccion(transaccion.FacturaId))
        {
            await CargarTransacciones();
        }
    }
}