@page "/Categoria/Edit/{idCategoria:int}"
@rendermode InteractiveServer
@inject CategoriasService categoriaService
@inject NavigationManager navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Editar categoría</PageTitle>

<EditForm Model="Categoria" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-warning rounded">
                    <h1>Editar categoría</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* Id *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="CategoriaId">Id</label>
                    <InputNumber id="CategoriaId" class="form-control text-left"
                                 readonly @bind-Value="Categoria.CategoriaId"></InputNumber>
                </div>

                @* Nombre *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="Nombre">Nombre</label>
                    <InputText id="Nombre" class="form-control"
                               @bind-Value="Categoria.Nombre" placeholder="Ej: Electrónica">
                    </InputText>
                    <ValidationMessage For="@(() => Categoria.Nombre)"></ValidationMessage>
                </div>

                @* Descripción *@
                <div class="mb-3 col-10">
                    <label class="form-label" for="Descripcion">Descripción</label>
                    <InputTextArea id="Descripcion" class="form-control"
                                   @bind-Value="Categoria.Descripcion"
                                   placeholder="Ej: Productos electrónicos y dispositivos tecnológicos"
                                   rows="3">
                    </InputTextArea>
                    <ValidationMessage For="@(() => Categoria.Descripcion)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center gap-3">
                <button type="submit" class="btn btn-warning">
                    <i class="bi bi-pencil-square"></i> Guardar cambios
                </button>

                <button class="btn btn-secondary" type="button" @onclick="Volver">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Categoria? Categoria { get; set; } = new Categoria();
    List<ToastMessage> Mensajes = new List<ToastMessage>();
    [Parameter]
    public int idCategoria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categoria = await categoriaService.Buscar(idCategoria);

        if (Categoria == null)
        {
            navigation.NavigateTo("/Categoria/Index");
        }
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var editado = await categoriaService.Guardar(Categoria);
            if (editado)
            {
                MostrarMensaje(ToastType.Success,
                    $"Categoría {Categoria.Nombre} ha sido editada correctamente.");
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "La categoría no se ha podido editar correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe una categoría con este nombre.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await categoriaService.Existe(Categoria.CategoriaId, Categoria.Nombre);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Categoria/Index");
}